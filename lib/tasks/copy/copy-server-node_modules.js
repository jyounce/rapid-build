module.exports = function(config, gulp) {
  var api, copyModules, copyTask, promiseHelp, q, removeJasmineExpect;
  q = require('q');
  promiseHelp = require(config.req.helpers + "/promise");
  copyTask = function(src, dest) {
    var defer;
    defer = q.defer();
    gulp.src(src).pipe(gulp.dest(dest)).on('end', function() {
      return defer.resolve();
    });
    return defer.promise;
  };
  removeJasmineExpect = function() {
    var i, module, rbModules;
    if (config.env.is.testServer) {
      return promiseHelp.get();
    }
    rbModules = config.node_modules.rb.modules;
    for (i in rbModules) {
      module = rbModules[i];
      if (module === 'jasmine-expect') {
        rbModules.splice(i, 1);
        break;
      }
    }
    return promiseHelp.get();
  };
  copyModules = function() {
    var appOrRb, defer, dest, fn, j, len, module, ref, ref1, src, tasks, v;
    tasks = [];
    defer = q.defer();
    ref = config.node_modules;
    for (appOrRb in ref) {
      v = ref[appOrRb];
      if (appOrRb === 'rb' && config.exclude["default"].server.files) {
        continue;
      }
      ref1 = v.modules;
      fn = function(src, dest) {
        return tasks.push(function() {
          return copyTask(src, dest);
        });
      };
      for (j = 0, len = ref1.length; j < len; j++) {
        module = ref1[j];
        src = config.glob.node_modules[appOrRb].src[module];
        dest = v.dist.modules[module];
        fn(src, dest);
      }
    }
    tasks.reduce(q.when, q()).done(function() {
      return defer.resolve();
    });
    return defer.promise;
  };
  api = {
    runTask: function() {
      var defer, tasks;
      defer = q.defer();
      tasks = [
        function() {
          return removeJasmineExpect();
        }, function() {
          return copyModules();
        }
      ];
      tasks.reduce(q.when, q()).done(function() {
        return defer.resolve();
      });
      return defer.promise;
    }
  };
  return api.runTask();
};
